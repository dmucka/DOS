@namespace DOS_PL.Data
@typeparam TModel

@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data;
@using DOS_DAL.Interfaces;
@using System.Collections;

@inherits DataAdaptor<TModel>

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IQueryable<TModel> DataSource { get; set; }

    public override object Read(DataManagerRequest dm, string key = null)
    {
        var data = DataSource;

        // Filtering
        if (dm.Where != null && dm.Where.Count > 0)
            data = DataOperations.PerformFiltering(data, dm.Where, dm.Where[0].Operator);

        // Searching
        if (dm.Search != null && dm.Search.Count > 0)
            data = DataOperations.PerformSearching(data, dm.Search);

        // Paging
        if (dm.Skip != 0)
            data = DataOperations.PerformSkip(data, dm.Skip);
        if (dm.Take != 0)
            data = DataOperations.PerformTake(data, dm.Take);

        // cache the data from database
        var executed = data.ToList();

        // Sorting
        if (dm.Sorted != null && dm.Sorted.Count > 0)
            executed = DataOperations.PerformSorting(executed.AsQueryable(), dm.Sorted).ToList();

        return dm.RequiresCounts ? new DataResult() { Result = executed, Count = executed.Count } : (object)data;
    }
}
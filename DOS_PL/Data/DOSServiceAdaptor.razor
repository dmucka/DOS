@namespace DOS_PL.Data
@typeparam TModel

@using DOS_BL.Queries;
@using DOS_DAL;
@using DOS_BL.Interfaces;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.Grids;
@using DOS_DAL.Interfaces;
@using System.Collections;
@using System.Collections.ObjectModel; 

@inherits DataAdaptor<TModel>
@inject DOSContext DOSContext

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IQueryable<TModel> DataSource { get; set; }

    private System.Threading.SemaphoreSlim _semaphore = new(1, 1);

    public override async Task<object> UpdateAsync(DataManager dataManager, object data, string keyField, string key)
    {
        if (data is TModel model)
        {
            // TODO: refactor using DTO

            // syncfusion sfgrid handles the updates by making an identical copy of the objects
            // we need to check if this object is tracked, and set the flags accordingly
            var entry = DOSContext.Entry(model).Entity;
            var tracked = await DOSContext.Set<TModel>().FindAsync(model.Id);
            if (tracked is not null)
            {
                DOSContext.Entry<TModel>(tracked).State = Microsoft.EntityFrameworkCore.EntityState.Detached;
                DOSContext.Entry<TModel>(model).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
            }

            //DOSContext.Set<TModel>().Update(model);
            await DOSContext.CommitAsync();

            // cleanup
            if (tracked is not null)
            {
                DOSContext.Entry<TModel>(tracked).State = Microsoft.EntityFrameworkCore.EntityState.Detached;
                DOSContext.Entry<TModel>(model).State = Microsoft.EntityFrameworkCore.EntityState.Detached;
                DOSContext.SaveChanges();
            }

            return data;
        }

        return null;
    }

    public override async Task<object> ReadAsync(DataManagerRequest dm, string key = null)
    {
        // TODO remove
        if (DataSource is not IAsyncEnumerable<TModel>)
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = DataSource.Count() } : DataSource;

        var data = DataSource;

        // Filtering
        if (dm.Where != null && dm.Where.Count > 0)
            data = DataOperations.PerformFiltering(data, dm.Where, dm.Where[0].Operator);

        // Searching
        if (dm.Search != null && dm.Search.Count > 0)
            data = DataOperations.PerformSearching(data, dm.Search);

        // Paging
        if (dm.Skip != 0)
            data = DataOperations.PerformSkip(data, dm.Skip);
        if (dm.Take != 0)
            data = DataOperations.PerformTake(data, dm.Take);

        // cache the data from database
        List<TModel> executed;

        try
        {
            // critical section
            // the semaphore is needed because the user can
            // spam the input, causing a concurrency issue
            await _semaphore.WaitAsync();
            executed = await data.ToListAsync();
            _semaphore.Release();
        }
        catch (Exception ex)
        {
            throw new Exception("Error occured while occupying a lock to the database.", ex);
        }

        // Sorting
        if (dm.Sorted != null && dm.Sorted.Count > 0)
            executed = DataOperations.PerformSorting(executed.AsQueryable(), dm.Sorted).ToList();

        var observable = new ObservableCollection<TModel>(executed);

        return dm.RequiresCounts ? new DataResult() { Result = observable, Count = executed.Count } : observable;
    }

    public override object Read(DataManagerRequest dm, string key = null)
    {
        var data = DataSource;

        // Filtering
        if (dm.Where != null && dm.Where.Count > 0)
            data = DataOperations.PerformFiltering(data, dm.Where, dm.Where[0].Operator);

        // Searching
        if (dm.Search != null && dm.Search.Count > 0)
            data = DataOperations.PerformSearching(data, dm.Search);

        // Paging
        if (dm.Skip != 0)
            data = DataOperations.PerformSkip(data, dm.Skip);
        if (dm.Take != 0)
            data = DataOperations.PerformTake(data, dm.Take);

        // cache the data from database
        var executed = data.ToList();

        // Sorting
        if (dm.Sorted != null && dm.Sorted.Count > 0)
            executed = DataOperations.PerformSorting(executed.AsQueryable(), dm.Sorted).ToList();

        return dm.RequiresCounts ? new DataResult() { Result = executed, Count = executed.Count } : executed;
    }
}
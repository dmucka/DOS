@page "/product/add"
@layout MainLayout

@using DOS_DAL.Models;
@using DOS_BL.DataObjects;
@using DOS_PL.Validation;
@using DOS_BL.Services
@using Syncfusion.Blazor.Lists;

@inject ProductService ProductService
@inject ProcessService ProcessService

@inject NavigationManager NavigationManager

<div class="d-flex align-items-center justify-content-center">
    <a href="/products" class="btn btn-secondary dos-return-button">Return</a>
    <span class="display-4">Add new product</span>
</div>

<hr />

<div class="d-flex justify-content-center">
    <EditForm EditContext="@_editContext" OnValidSubmit="PerformAddProduct" class="p-4 mw-75 border rounded border-secondary">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <OptionalFieldValidator />
        <ServerSideValidator @ref="_serverSideValidator" />

        <div class="input-group input-group-lg mb-4 w-100">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Name</span>
            </div>

            <InputText class="form-control" @bind-Value="@_createProductDTO.Name" />
        </div>

        <div class="input-group input-group-lg mb-4 w-100">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Description</span>
            </div>

            <InputText class="form-control" @bind-Value="@_createProductDTO.Description" />
        </div>

        <div class="card @ProcessErrorClass mb-4 w-100 d-flex justify-content-center">
            <div class="card-header">
                <span class="mw-label">Select processes</span>
            </div>

            <SfListView DataSource="@_processes" ShowCheckBox="true">
                <ListViewEvents TValue="CheckedProcess" Clicked="OnListViewClicked" />
                <ListViewFieldSettings TValue="CheckedProcess" Id="Id" Text="Name" IsChecked="IsChecked" />
            </SfListView>
        </div>

        <button type="submit" class="btn btn-primary w-100 mt-5 mb-1 @DisabledClass">Add</button>
    </EditForm>
</div>

@code {

    public class CheckedProcess : Process
    {
        public CheckedProcess(int id, string name)
        {
            Id = id;
            Name = name;
        }

        public bool IsChecked { get; set; }
    }

    private ServerSideValidator _serverSideValidator;
    private bool _isFormValid;
    private bool _isProcessCollectionValid = true;
    private CreateProductDTO _createProductDTO = new();
    private EditContext _editContext;
    private List<CheckedProcess> _processes = new();

    private string DisabledClass => _isFormValid ? "" : "disabled";
    private string ProcessErrorClass => _isProcessCollectionValid ? "" : "is-invalid";

    private void OnListViewClicked(ClickEventArgs<CheckedProcess> args)
    {
        _serverSideValidator.ClearErrors();
        args.ItemData.IsChecked = args.IsChecked;

        if (!_processes.Any(x => x.IsChecked))
        {
            _serverSideValidator.DisplayError("ProcessIds", "At least one process must be selected.");
            _isProcessCollectionValid = false;
        }
        else
        {
            _isProcessCollectionValid = true;
        }
    }


    private async Task PerformAddProduct()
    {
        if (!_processes.Any(x => x.IsChecked))
        {
            _serverSideValidator.ClearErrors();
            _serverSideValidator.DisplayError("ProcessIds", "At least one process must be selected.");
            _isProcessCollectionValid = false;
            return;
        }

        if (ProductService.GetByName(_createProductDTO.Name) is not null)
        {
            _serverSideValidator.DisplayError("Name", "Product already exists.");
            return;
        }

        _createProductDTO.ProcessIds.AddRange(_processes.Where(x => x.IsChecked).Select(x => x.Id).OrderBy(x => x).ToList());

        if (!await ProductService.InsertAsync(_createProductDTO))
        {
            _serverSideValidator.DisplayError("", "An error occured while creating new product.");
            return;
        }

        NavigationManager.NavigateTo("/products");
    }

    protected override void OnInitialized()
    {
        _editContext = new(_createProductDTO);
        _editContext.SetFieldCssClassProvider(new BootstrapValidationCssClassProvider());
        _editContext.OnFieldChanged += (s, e) =>
        {
            _isFormValid = _editContext.Validate();
            StateHasChanged();
        };

        foreach (var process in ProcessService.AsQueryable().ToList())
        {
            var checkedProcess = new CheckedProcess(process.Id, process.Name);
            _processes.Add(checkedProcess);
        }
    }
}

@page "/users/add"
@layout MainLayout

@using DOS_DAL.Constants;
@using DOS_DAL.Models;
@using DOS_BL.DataObjects;
@using DOS_PL.Validation;
@using DOS_BL.Services
@using System.ComponentModel.DataAnnotations;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;

@inject UserService UserService
@inject RoleService RoleService
@inject NavigationManager NavigationManager

<div class="d-flex align-items-center justify-content-center">
    <a href="/users" class="btn btn-secondary dos-return-button">Return</a>
    <span class="display-4">Add new user</span>
</div>

<hr />

<div class="d-flex justify-content-center">
    <EditForm EditContext="@_editContext" OnValidSubmit="PerformAddUser" class="p-4 mw-75 border rounded border-secondary">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <OptionalFieldValidator />
        <ServerSideValidator @ref="_serverSideValidator" />

        <div class="input-group input-group-lg mb-4 w-100">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Username</span>
            </div>
            <InputText class="form-control" @bind-Value="@_createUserDTO.Username" />
        </div>

        <div class="input-group input-group-lg mb-4 w-100">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Password</span>
            </div>
            <InputText class="form-control" type="password" @bind-Value="@_createUserDTO.Password" />
        </div>

        <div class="input-group input-group-lg mb-4 w-100">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Email</span>
            </div>

            <InputText class="form-control" type="email" @bind-Value="@_createUserDTO.Email" />
        </div>

        <div class="d-flex mb-4 justify-content-around">
            <div class="input-group input-group-lg w-50">
                <div class="input-group-prepend">
                    <span class="input-group-text mw-label">First name</span>
                </div>
                <InputText class="form-control" @bind-Value="@_createUserDTO.FirstName" />
            </div>

            <div class="input-group input-group-lg w-50 ml-2">
                <div class="input-group-prepend">
                    <span class="input-group-text mw-label">Last name</span>
                </div>
                <InputText class="form-control" @bind-Value="@_createUserDTO.LastName" />
            </div>
        </div>

        <div class="input-group input-group-lg mb-4 w-100 d-flex justify-content-center">
            <div class="input-group-prepend">
                <span class="input-group-text mw-label">Role</span>
            </div>
            <SfDropDownList DataSource="@_roles" @bind-Value="@_createUserDTO.RoleId">
                <DropDownListFieldSettings Value="Id" Text="Name" />
            </SfDropDownList>
        </div>

        <button type="submit" class="btn btn-primary w-100 mt-5 mb-1 @DisabledClass">Add</button>
    </EditForm>
</div>

@code {
    private ServerSideValidator _serverSideValidator;
    private bool _isFormValid;
    private CreateUserDTO _createUserDTO = new();
    private EditContext _editContext;
    private List<Role> _roles;

    private string DisabledClass => _isFormValid ? "" : "disabled";

    private async Task PerformAddUser()
    {
        if (UserService.GetByName(_createUserDTO.Username) is not null)
        {
            _serverSideValidator.DisplayError("Username", "User already exists.");
            return;
        }

        if (!await UserService.InsertAsync(_createUserDTO))
        {
            _serverSideValidator.DisplayError("Username", "An error occured while creating new user.");
            return;
        }

        NavigationManager.NavigateTo("/users");
    }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new(_createUserDTO);
        _editContext.SetFieldCssClassProvider(new BootstrapValidationCssClassProvider());
        _editContext.OnFieldChanged += (s, e) =>
        {
            _isFormValid = _editContext.Validate();
            StateHasChanged();
        };

        _roles = await RoleService.GetAllAsync();
        _createUserDTO.RoleId = _roles.FirstOrDefault(x => x.Name == RoleConstants.Operator).Id;
    }
}
